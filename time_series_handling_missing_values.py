# -*- coding: utf-8 -*-
"""Time series handling missing values

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OVQHjcIdAgqnG6EeWSN3fohpys3_1xYh
"""

pip install download

import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
from download import download
import os

path = download('https://archive.ics.uci.edu/ml/machine-learning-databases/00501/PRSA2017_Data_20130301-20170228.zip','/tmp/aq',kind='zip',replace =True)

df = pd.read_csv('/tmp/aq/PRSA_Data_20130301-20170228/PRSA_Data_Dingling_20130301-20170228.csv')

df.head()

import datetime

def date(*x):
  return datetime.datetime.strptime(*x,'%Y %m %d %H')

df = pd.read_csv('/tmp/aq/PRSA_Data_20130301-20170228/PRSA_Data_Dingling_20130301-20170228.csv', parse_dates=[['year','month','day','hour']],date_parser = date)

df.head()

df.info()

print('rows   : ',df.shape[0])
print('columns   : ', df.shape[1])
print('\n Features  : \n', df.columns.tolist())
print('\n missing_values  : \n', df.isnull().any())
print('\nUnique values  : \n', df.nunique())

df.isnull().sum()

df.query('TEMP!=TEMP').count()

df[df['PM2.5'].isnull()]

import plotly.express as px
fig = px.line(df,x = 'year_month_day_hour', y='PM2.5',title =' PM2.5 with slider ')

fig.update_xaxes(
    

    rangeslider_visible = True,
    rangeselector = dict(
        buttons = list([
             dict(count=1,label='1y',step = 'year',stepmode ='backward'),
             dict(count = 2,label = '2y', step = 'year', stepmode = 'backward'),
             dict(count =3 , label='3y', step='year', stepmode='backward'),
             dict(step ='all')
                      ])

    )
)
fig.show()

fig = px.line(df,x='year_month_day_hour', y = 'TEMP', title = 'TEMP with slider')
fig.update_xaxes(
    rangeslider_visible=True,
    rangeselector=dict(
        buttons = list([
             dict(count=1,label='1y',step='year',stepmode='backward'),
             dict(count=2, label='2y',step='year',stepmode='backward'),
             dict(count=3,label='3y',step='year',stepmode='backward'),
             dict(step='all')           
        ]
        )
    )
)
fig.show()

df =df.set_index('year_month_day_hour')

df.loc['2015-02-02':'2015-02-04']

df_na = df.copy()
df_na = df_na.dropna()

pd.plotting.autocorrelation_plot(df_na['2014':'2016']['TEMP'])

pd.plotting.autocorrelation_plot(df['2014':'2015']['TEMP'].resample('1m').mean())

pd.plotting.lag_plot(df['TEMP'],lag=1)

pd.plotting.lag_plot(df['TEMP'],lag=3)

pd.plotting.lag_plot(df['TEMP'],lag=24)

pd.plotting.lag_plot(df['TEMP'],lag =8640)

df['2015-02-21 10':'2015-02-21 20']

df_temp_imp  =df['2015-02-21 10':'2015-02-21 23'][['TEMP']]

df_temp_imp

df_temp_imp['TEMP_FILL'] = df_temp_imp['TEMP'].fillna(method='ffill')#forward fill of missing data

df_temp_imp

df_temp_imp['TEMP_ROLLING'] = df_temp_imp['TEMP'].rolling(window=2,min_periods=1).mean()

df_temp_imp

df.loc[df_temp_imp.index+pd.offsets.DateOffset(years = -1)]['TEMP']## previous weekend sales like last year temp

df_temp_imp = df_temp_imp.reset_index()#resetting index to 2015 from 2014 beacuse it wil have two dates 14 and 15

df_temp_imp

df_temp_imp['TEMP_PREV']= df_temp_imp.apply(lambda x: df.loc[x['year_month_day_hour']-pd.offsets.DateOffset(years=-1)]['TEMP'] if pd.isna(x['TEMP']) else x['TEMP'],axis=1)

df_temp_imp#previous year data

#now check which imputation is okay

